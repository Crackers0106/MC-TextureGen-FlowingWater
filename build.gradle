buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.0'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
}

// Reproducible builds
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

apply plugin: 'java'

// Defines a Java 6 compatible JDK
// Note to self: probably support building with not outdated versions of Java in the future.
def compiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(6)
}

// Use the provisioned Java 6 compatible JDK as the main toolchain
// Note to self: probably support building with not outdated versions of Java in the future.
java {
    toolchain {
        compiler
    }
}

tasks.withType(JavaCompile) {
    // Ensures that the encoding of source files is set to UTF-8, see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    options.encoding = "UTF-8"
}

compileJava {
    // Use the provisioned Java 6 compatible JDK to compile the program
    // Note to self: probably support building with not outdated versions of Java in the future.
    javaCompiler = compiler
}

compileTestJava {
    // Use a Java 8 compatible JDK to compile the tests for the program,
    // as JUnit does not support outdated versions of Java
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

test {
    // Use a Java 8 compatible JDK / JRE to run the tests for the program,
    // as JUnit does not support outdated versions of Java
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.junit.jupiter',
    name: 'junit-jupiter', version: '5.7.2'
}

task ('proguard', type: proguard.gradle.ProGuardTask) {
    dependsOn "jar"
    // Workaround for ProGuard seemingly not recognising that when the output .jar file doesn't exist
    outputs.upToDateWhen { false }

    verbose

    injars "build/libs/MCTextureGenerator-debug.jar"
    outjars "build/libs/MCTextureGenerator.jar"

    // Get the location of rt.jar from the provided toolchain.
    // Note to self: probably support building with not outdated versions of Java in the future.
    libraryjars compiler.get().metadata.installationPath.asFile.absolutePath + "/lib/rt.jar"
    // rt.jar is sometimes only in a JRE folder
    libraryjars compiler.get().metadata.installationPath.asFile.absolutePath + "/jre/lib/rt.jar"
    // Dumb MacOS stuff, Apple's Legacy JDK 6 "rt.jar" equivalent is not in any standard place
    libraryjars compiler.get().metadata.installationPath.asFile.absolutePath + "/../Classes/classes.jar"

    // The rest of the configs are in this file
    configuration 'guard.pro'
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

def obfsJar = artifacts.add('archives', file(proguard.outputs.files.singleFile)) {
    type('jar')
    builtBy(proguard)
}

artifacts {
    archives sourcesJar
    archives obfsJar
}

jar {
    manifest {
        attributes (
            'Main-Class': 'mcTextureGen.MCTextureGenerator'
        )
    }
    classifier = "debug"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact obfsJar
        }
    }
}
